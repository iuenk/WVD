name: 4-Add-WVD-Session-Host
on: workflow_dispatch

jobs:
  build:
    name: 4-Add-WVD-Session-Host
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          $Tags = @{"Environment"="PRD"; "Maintenance"="Thursday"}
          $HostPoolName = "Ucorp-WVD-Pool" 
          $vmSize = "Standard_D4s_v3"
          $VaultName = "Ucorp-WVD-KV"
          $NumberOfInstances = 2
          $ResourceGroup = "Ucorp-WVD-RG"
          $VNetName = "Ucorp-vNet"
          $SubnetName = "Ucorp-WVD-Subnet"
          $VNetResourceGroup = "Ucorp-Network-RG"
          
          # Retrieve the given Host Pool information
          try 
          {
              $hostPool = Get-AzWvdHostPool -SubscriptionId ${{secrets.AZURE_SUBSCRIPTIONID}} | Where {$_.Name -eq $HostPoolName}
          }
          catch 
          {
              Write-Error ("A [" + $_.Exception.GetType().FullName + "] ERROR occurred. " + $_.Exception.Message)
              Break
          }
          If ($hostPool.Count -gt 0)
          {
            $hostpoolRG = $hostPool.Id.Split("/")[4]
            $hostpoolName = $hostPool.Id.Split("/")[-1]
            
            # Retrieve the current Session Host information
            try
            {
              $sessionHost = Get-AzWvdSessionHost -HostPoolName $($hostpool.Name) -ResourceGroupName $($hostpoolRG)
            }
            catch
            {
              Write-Error ("A [" + $_.Exception.GetType().FullName + "] ERROR occurred. " + $_.Exception.Message)
              Break
            }
                
            # Determine new Session Host number
            $vmTemplate = ($hostPool.VMTemplate | ConvertFrom-Json)
            if($SessionHost -eq $null){
              $vmInitialNumber = -1 + $NumberOfInstances

              $NewComputerName = "{0}{1}" -f "$($vmTemplate.namePrefix)-",$vmInitialNumber
              Write-Output "$NewComputerName"
            }
            Else {
              # get next available number in a range of numbers
              $VMNames = Get-AzVM -Name "$($vmTemplate.namePrefix)*" -verbose:$false | select Name
              $VMNames | select Name | Foreach-Object {Write-Verbose $_.Name} | Sort-Object
              $VMNumbers = $VMNames | select Name | Foreach-Object {[int]($_.Name -replace '\D').Trim() } | Sort-Object
              Write-Output "$($VMNumbers.Count) Matching entries found"

              # Merge arrays adding a zero so we allways start issuing numbers from the beginning
              $list = @(0) + $VMNumbers

              # Remove Duplicates numbers from the array and sort into numerical order
              $list = $list | Sort-Object -Unique

              # Determine if next server name is a gap in the sequence in the array
              for($i=0; $i -lt $list.length; $i++) {
                  if( $list[$i+1]-$list[$i] -gt 1) {
                      $vmInitialNumber = "{0:0}" -f ($list[$i]+1)
                      $vmInitialNumber = [int]($vmInitialNumber)
                      break
                  }
              }

              # If no gap found in the sequence then use the next number from the sequence in the array
              if ($vmInitialNumber -eq $null) {
                $vmInitialNumber = "{0:0}" -f (($list[-1]+1))
                $vmInitialNumber = [int]($vmInitialNumber)
              }

              # Construct new name
              $NewComputerName = "{0}{1}" -f "$($vmTemplate.namePrefix)-",$vmInitialNumber

              Write-Output "$NewComputerName"
              }

            $vmCustomImageSourceId = $($vmTemplate.customImageId);

            # Retrieve sensitive information from KeyVault
            $secureAdminPassword = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainadminpassword).SecretValue
            $secureDomainAdminUser = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainadminuser).SecretValue
            $secureDomainName = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainname).SecretValue
            $secureOuPath = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainoupath).SecretValue
            
            # Convert KeyVault SecureString to Plaintext
            $domainAdminUser = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainAdminUser)))
            $domainName = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainName)))
            $ouPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureOuPath)))
            
            # Retrieve Hostpool token
            $registrationInfo = Get-AzWvdRegistrationInfo -SubscriptionId ${{secrets.AZURE_SUBSCRIPTIONID}} -ResourceGroupName $($hostpoolRG) -HostPoolName $($hostpoolName)
            
            if ($($registrationInfo.ExpirationTime) -le $((Get-Date).ToUniversalTime().ToString('MM/dd/yyyy HH:mm:ss')) -and $(!([string]::IsNullOrEmpty($registrationInfo.ExpirationTime))))
            {
              $hostpoolToken = $registrationInfo.Token
            }
            else
            {
              $hostpoolToken = $((New-AzWvdRegistrationInfo -ResourceGroupName $hostpoolRG -HostPoolName $HostPoolName -ExpirationTime $((Get-Date).ToUniversalTime().AddDays(1).ToString('yyyy-MM-ddTHH:mm:ss.fffffffZ'))).Token)
            }
            
            ## Create a Template Parameter Object (hashtable)
            $objTemplateParameter = @{
              "hostpoolName" = $HostPoolName;
              "hostpoolToken" = $hostpoolToken;
              "hostpoolResourceGroup" = $($hostPool.Id.Split("/")[4]);
              "hostpoolProperties" = @{};
              "hostpoolLocation" = $($hostPool.Location);
              "createAvailabilitySet" = $false;
              "vmInitialNumber" = $vmInitialNumber;
              "vmResourceGroup" = $($ResourceGroup);
              "vmLocation" = "westeurope";
              "vmSize" = $vmSize;
              "vmNumberOfInstances" = $NumberOfInstances;
              "vmNamePrefix" = $($vmTemplate.namePrefix);
              "vmImageType" = $($vmTemplate.imageType);
              "vmImageVhdUri" = [string]$($vmTemplate.imageUri);
              "vmDiskType" = $($vmTemplate.osDiskType);
              "vmUseManagedDisks" = $($vmTemplate.useManagedDisks);
              "existingVnetName" = $($VNetName);
              "existingSubnetName" = $($SubnetName);
              "virtualNetworkResourceGroupName" = $($VNetResourceGroup);
              "createNetworkSecurityGroup" = $false;
              "virtualMachineTags" = $Tags;
              "apiVersion" = "2019-12-10-preview";
              "administratorAccountUsername" = "$($domainAdminUser)";
              "domain"="$($domainName)";
              "ouPath"="$($ouPath)";
              "aadJoin" = $false;
              "intune" = $false;
            }
            
            # Add additional parameters, based on image type
            If ($vmTemplate.imageType -eq "Gallery")
            {
                # Add the Gallery image information
                $objTemplateParameter.Add("vmGalleryImageOffer",$($vmTemplate.galleryImageOffer))
                $objTemplateParameter.Add("vmGalleryImagePublisher",$($vmTemplate.galleryImagePublisher))
                $objTemplateParameter.Add("vmGalleryImageSKU",$($vmTemplate.galleryImageSKU))
            }
            If ($vmTemplate.imageType -eq "CustomImage")
            {
                # Add the Gallery image information
                $objTemplateParameter.Add("vmCustomImageSourceId",$($vmCustomImageSourceId))
            }

            ## Show objTemplateParameter
            #$objTemplateParameter
            
            # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
            $jsonARMTemplateFile = [string]($env:TEMP + "\4-ARM-Add-WVD-Session-Host.json")
            
            # Storage location for custom ARM template
            $templateUrl="https://raw.githubusercontent.com/iuenk/WVD/main/ARMTemplates/4-ARM-Add-WVD-Session-Host.json"
            
            # Retrieve the template file and save it in a temp file location
            Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing
            
            # ARM Template file
            ## Add SessionHosts to existing WVD Hostpool, based on ARM Template
            New-AzResourceGroupDeployment -ResourceGroupName $hostpoolRG -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -administratorAccountPassword $secureAdminPassword -Verbose
          
          }

        azPSVersion: 'latest'
