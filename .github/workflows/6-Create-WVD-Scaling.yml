name: 6-Create-WVD-Scaling
on: workflow_dispatch

env:
  STORAGE_ACCOUNT: "ucorpwvdstd"
  RESOURCE_GROUP: "ucorp-wvd1-rg"
  SECURITY_GROUP: "SG_WVD_Users"

jobs:
  build:
    name: 6-Create-WVD-Scaling
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          [string]$storageAccountName = [System.Environment]::GetEnvironmentVariable('STORAGE_ACCOUNT')
          [string]$ResourceGroup = [System.Environment]::GetEnvironmentVariable('RESOURCE_GROUP')
          [string]$SecurityGroup = [System.Environment]::GetEnvironmentVariable('SECURITY_GROUP')

          $Tags = @{"Environment"="WVD Production"}
          $FunctionFilePath,
          $ArmTemplateFilePath,
          $ResourceGroupName,
          $ResourceGroupLocation

          # Create the resource group if needed
          try {
              Get-AzResourceGroup -Name $ResourceGroup -ErrorAction Stop
          } catch {
              New-AzResourceGroup -Name $ResourceGroup -Location "westeurope" -Tag $Tags
          }

          # Read the contents of the function file and assemble deployment parameters
          $functionFileContents = [System.IO.File]::ReadAllText($FunctionFilePath)
          $templateParameters = @{}
          $templateParameters.Add("functionFile", $functionFileContents)

          ## Create a Template Parameter Object (hashtable)
          $objTemplateParameter = @{
          "storageAccountName" = "$storageAccountName";
          "location" = "westeurope";
          "accessTier" = "Hot";
          "minimumTlsVersion" = "TLS1_2";
          "supportsHttpsTrafficOnly" = $true;
          "allowBlobPublicAccess" = $false;
          "allowSharedKeyAccess" = $true;
          "networkAclsBypass" = "AzureServices";
          "networkAclsDefaultAction" = "Allow";
          "accountType" = "Standard_LRS";
          "kind" = "StorageV2";
          "isShareSoftDeleteEnabled" = $true;
          "shareSoftDeleteRetentionDays" = 90;
          }

          # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
          $jsonARMTemplateFile = [string]($env:TEMP + "\1-ARM-Create-Storage-Account.json")
              
          # storage location for custom ARM template
          $templateUrl="https://raw.githubusercontent.com/iuenk/WVD/main/ARMTemplates/1-ARM-Create-Storage-Account.json"

          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing

          # ARM Template file
          ## Add SessionHosts to existing WVD Hostpool, based on ARM Template
          New-AzResourceGroupDeployment -ResourceGroupName $ResourceGroup -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -Tag $Tags -Verbose

          # deploy it
          New-AzResourceGroupDeployment -ResourceGroupName  AzUnzipEverything -TemplateFile deployment\deployAzure.json

        azPSVersion: 'latest'