name: 6-Create-WVD-Scaling
on: workflow_dispatch

jobs:
  build:
    name: 6-Create-WVD-Scaling
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          $Tags = @{"Environment"="WVD Production"}
          $ResourceGroup = "Ucorp-WVD-RG"
          $functionsAppName = "ucorpwvdscale"
          $storageAccountName = "ucorpwvdstd"
          $storageAccountResourceGroup = "Ucorp-Storage-RG"

          # Create the resource group if needed
          try {
              Get-AzResourceGroup -Name $ResourceGroup -ErrorAction Stop
          } catch {
              New-AzResourceGroup -Name $ResourceGroup -Location "westeurope" -Tag $Tags
          }

          # Temp location for the run.ps1 (discarded when runbook is finished)
          $FunctionFilePath = [string]($env:TEMP + "\6-Ucorp-WVD-Scaling.ps1")
              
          # Script location on github
          $ScriptUrl="https://raw.githubusercontent.com/iuenk/WVD/main/PSScripts/6-Ucorp-WVD-Scaling.ps1"

          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $ScriptUrl -OutFile $FunctionFilePath -UseBasicParsing

          # Read the contents of the function file and assemble deployment parameters
          $functionFileContents = [System.IO.File]::ReadAllText($FunctionFilePath)
          $objTemplateParameter = @{
            "functionsAppName" = $functionsAppName;
            "FunctionName" = $functionsAppName;
            "functionSchedule" = "0 */5 * * * *";
            "functionsStorageAccountName" = $storageAccountName;
            "storageAccountResourceGroup" = $storageAccountResourceGroup;
            "functionsAppServicePlanName" = $functionsAppName;
            }
          $objTemplateParameter.Add("functionFile", $functionFileContents)

          # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
          $jsonARMTemplateFile = [string]($env:TEMP + "\6-ARM-Create-WVD-Scaling.json")
              
          # storage location for custom ARM template
          $templateUrl="https://raw.githubusercontent.com/iuenk/WVD/main/ARMTemplates/6-ARM-Create-WVD-Scaling.json"

          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing

          # ARM Template file
          ## Create WVD scaling function app
          New-AzResourceGroupDeployment -ResourceGroupName $ResourceGroup -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -Tag $Tags -Verbose

          # Give function app contributor rights on the WVD resource group
          $functionsAppNameId = Get-AzADServicePrincipal | Where-Object {$_.DisplayName -eq $functionsAppName} | Select-Object -ExpandProperty Id
          New-AzRoleAssignment -ObjectId $functionsAppNameId -RoleDefinitionName "Contributor" -ResourceGroupName $ResourceGroup
          
        azPSVersion: 'latest'