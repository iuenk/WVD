name: 5-Add-VM-Extension
on: workflow_dispatch

jobs:
  build:
    name: 5-Add-VM-Extension
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          $Tags = @{"Environment"="WVD Production"}
          $HostPoolName = "Ucorp-WVD-Pool"
          $ResourceGroup = "Ucorp-Logging-RG"
          $WorkspaceName = "Ucorp-WVD-LAW"
          $WorkspaceId = (Get-AzOperationalInsightsWorkspace -ResourceGroupName $ResourceGroup -Name $WorkspaceName).CustomerId
          $PublicSettings = @{"workspaceId" = $workspaceId}
          $key = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $ResourceGroup -Name $WorkspaceName).PrimarySharedKey
          $ProtectedSettings = @{"workspaceKey" = $key}
          $FileUri = @("https://raw.githubusercontent.com/iuenk/WVD/main/PSScripts/Virtual-Desktop-Optimalization-Tool-20H2.ps1")
          $Settings = @{"fileUris" = $FileUri};
          $OptimalizationPack = @{"commandToExecute" = "powershell -ExecutionPolicy Unrestricted -File Virtual-Desktop-Optimalization-Tool-20H2.ps1"};
          $Location = "westeurope"
          $NumberOfInstances = 1

          # Retrieve the given Host Pool information
          $hostPool = Get-AzWvdHostPool -SubscriptionId $SubscriptionId | Where {$_.Name -eq $HostPoolName}
          $hostpoolRG = $hostPool.Id.Split("/")[4]
          $hostpoolName = $hostPool.Id.Split("/")[-1]

          # Place new Session Hosts in maintenance
          $newSessionHosts = Get-AzWvdSessionHost -HostPoolName $($hostpool.Name) -ResourceGroupName $hostpoolRG | Select-Object -Last $NumberOfInstances
          Foreach($newSessionHost in $newSessionHosts){
            $InputString = $newSessionhost.Name
            $WVDArray = $InputString.Split("/")
            $WVDArray[0]
            $WVDArray[1]

            Write-host Disabling new sessions for session host: $WVDArray[1]
            Update-AzWvdSessionHost -ResourceGroupName $hostpoolRG -HostPoolName $HostPoolName -Name $WVDArray[1] -AllowNewSession:$false
          }

          # Format new Session hosts name(s) needed for next action
          $VMs = Get-AzWvdSessionHost -HostPoolName $($hostpool.Name) -ResourceGroupName $hostpoolRG | Select-Object -Last $NumberOfInstances |
          ForEach {
          $wvdSessionHost = $_
          $wvdSessionHost.Name.Split("/")[1].Split(".")[0]
          }

          # Check VM status if not running start it wait till its running and next install VM extensions
          ForEach($VM in $VMs){
          Get-AzVM -ResourceGroupName $ResourceGroup -Name $VM -ErrorVariable notPresent -ErrorAction SilentlyContinue
          if ($notPresent) {
            Write-Output "VM not found."
          }
          Else {
            $provisioningState = ""
            $condition = ($provisioningState -eq "PowerState/running")
            while (!$condition){
            if ($lastProvisioningState -ne $provisioningState){
              write-host $VM "under" $resourceGroup "is" $provisioningState "(waiting for state change)"
              Start-AzVM -ResourceGroupName $ResourceGroup -Name $VM 
            }
              $lastProvisioningState = $provisioningState
              Start-Sleep -Seconds 5
              $provisioningState = (Get-AzVM -Resourcegroupname $resourceGroup -Name $VM -Status).Statuses[1].Code
              $condition = ($provisioningState -eq "PowerState/running")       
            }
              write-host $VM "under" $resourceGroup "is" $provisioningState

              # Install Microsoft Monitoring Agent
              $extensions = Get-AzVMExtension -ResourceGroupName $hostpoolRG -VMName $VM -Name "MicrosoftMonitoringAgent" -ErrorAction SilentlyContinue
              if (-not $extensions){
                $result = Set-AzVMExtension -ResourceGroupName $hostpoolRG -Location $Location -VMName $VM -Name "MicrosoftMonitoringAgent" -Publisher "Microsoft.EnterpriseCloud.Monitoring" -Type "MicrosoftMonitoringAgent" -TypeHandlerVersion "1.0" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings          
              }
              Else
              {
                Write-Output "Skipping VM - Extension MicrosoftMonitoringAgent already installed"
              }

              # Install Azure Monitoring Windows Agent
              $extensions = Get-AzVMExtension -ResourceGroupName $hostpoolRG -VMName $VM -Name "AzureMonitorWindowsAgent" -ErrorAction SilentlyContinue
              if (-not $extensions){
                $result = Set-AzVMExtension -ResourceGroupName $hostpoolRG -Location $Location -VMName $VM -Name "AzureMonitorWindowsAgent" -Publisher "Microsoft.Azure.Monitor" -Type "AzureMonitorWindowsAgent" -TypeHandlerVersion "1.0" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              }
              Else
              {
                Write-Output "Skipping VM - Extension AzureMonitorWindowsAgent already installed"
              }

              # Install Dependency Windows Agent
              $extensions = Get-AzVMExtension -ResourceGroupName $hostpoolRG -VMName $VM -Name "DependencyAgentWindows" -ErrorAction SilentlyContinue
              if (-not $extensions){
                $result = Set-AzVMExtension -ResourceGroupName $hostpoolRG -Location $Location -VMName $VM -Name "DependencyAgentWindows" -Publisher "Microsoft.Azure.Monitoring.DependencyAgent" -Type "DependencyAgentWindows" -TypeHandlerVersion "9.10" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              }
              Else
              {
                Write-Output "Skipping VM - Extension DependencyAgentWindows already installed"
              }

              # Install Guest Health Windows Agent
              $extensions = Get-AzVMExtension -ResourceGroupName $hostpoolRG -VMName $VM -Name "GuestHealthWindowsAgent" -ErrorAction SilentlyContinue
              if (-not $extensions){
                $result = Set-AzVMExtension -ResourceGroupName $hostpoolRG -Location $Location -VMName $VM -Name "GuestHealthWindowsAgent" -Publisher "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth" -Type "GuestHealthWindowsAgent" -TypeHandlerVersion "1.0" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              }
              Else
              {
                Write-Output "Skipping VM - Extension GuestHealthWindowsAgent already installed"
              }

              # Install Optimalization Pack
              $extensions = Get-AzVMExtension -ResourceGroupName $hostpoolRG -VMName $VM -Name "OptimalizationPack" -ErrorAction SilentlyContinue
              if (-not $extensions){
                $result = Set-AzVMExtension -ResourceGroupName $hostpoolRG -Location $Location -VMName $VM -Name "OptimalizationPack" -Publisher "Microsoft.Compute" -Type "CustomScriptExtension" -TypeHandlerVersion "1.10" -Settings $Settings -ProtectedSettings $OptimalizationPack
              }
              else
              {
                Write-Output "Skipping VM - Extension OptimalizationPack already installed"
              }

              Restart-AzVM -ResourceGroupName $hostpoolRG -Name $VM

            }
          }

          # Remove new Session Host from maintenance
          Foreach($newSessionHost in $newSessionHosts){
            $InputString = $newSessionhost.Name
            $WVDArray = $InputString.Split("/")
            $WVDArray[0]
            $WVDArray[1]

            Write-host Enabling new sessions for session host: $WVDArray[1]
            Update-AzWvdSessionHost -ResourceGroupName $hostpoolRG -HostPoolName $HostPoolName -Name $WVDArray[1] -AllowNewSession:$true
          }

        azPSVersion: 'latest'
