name: 5-Add-VM-Extension
on: workflow_dispatch

env:
  RESOURCE_GROUP: "ucorp-wvd1-rg"
  WORKSPACE_NAME: "ucorp-wvd1-law"

jobs:
  build:
    name: 5-Add-VM-Extension
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          [string]$ResourceGroup = [System.Environment]::GetEnvironmentVariable('RESOURCE_GROUP')
          [string]$WorkspaceName = [System.Environment]::GetEnvironmentVariable('WORKSPACE_NAME')

          $Tags = @{"Environment"="WVD Production"}
          $PublicSettings = @{"workspaceId" = "94584c69-48d1-4c8f-94cf-d8184dd0cd11"}
          $key = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName "ucorp-storage1-rg" -Name $WorkspaceName).PrimarySharedKey
          $ProtectedSettings = @{"workspaceKey" = $key}
          $FileUri = @("https://raw.githubusercontent.com/iuenk/WVD/main/PSScripts/Virtual-Desktop-Optimalization-Tool-20H2.ps1")
          $Settings = @{"fileUris" = $FileUri};
          $OptimalizationPack = @{"commandToExecute" = "powershell -ExecutionPolicy Unrestricted -File Virtual-Desktop-Optimalization-Tool-20H2.ps1"};
          $Location = "westeurope"

          # Get all VM's created today
          $logs = Get-AzLog -ResourceProvider Microsoft.Compute -StartTime (Get-Date).AddDays(-1)
          $VMs = @()
          foreach($log in $logs)
          {
              if(($log.OperationName.Value -eq 'Microsoft.Compute/virtualMachines/write') -and ($log.SubStatus.Value -eq 'Created'))
              {
                  Write-Output "- Found VM creation at $($log.EventTimestamp) for VM $($log.Id.split("/")[8]) in Resource Group $($log.ResourceGroupName) found in Azure logs"
                  $VMs += $($log.Id.split("/")[8])
              }
          }

          # Check VM status if not running start it and wait till its running, next install VM extensions.
          ForEach($VM in $VMs){
            $provisioningState = ""
            $condition = ($provisioningState -eq "PowerState/running")
            while (!$condition){
              if ($lastProvisioningState -ne $provisioningState){
                  write-host $VM "under" $resourceGroup "is" $provisioningState "(waiting for state change)"
                  Start-AzVM -ResourceGroupName $ResourceGroup -Name $VM 
              }
              $lastProvisioningState = $provisioningState
              Start-Sleep -Seconds 5
              $provisioningState = (Get-AzVM -Resourcegroupname $resourceGroup -Name $VM -Status).Statuses[1].Code
              $condition = ($provisioningState -eq "PowerState/running")       
              }
              write-host $VM "under" $resourceGroup "is" $provisioningState
              Set-AzVMExtension -ResourceGroupName $ResourceGroup -Location $Location -VMName $VM -Name "MicrosoftMonitoringAgent" -Publisher "Microsoft.EnterpriseCloud.Monitoring" -Type "MicrosoftMonitoringAgent" -TypeHandlerVersion "1.0" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              Set-AzVMExtension -ResourceGroupName $ResourceGroup -Location $Location -VMName $VM -Name "AzureMonitorWindowsAgent" -Publisher "Microsoft.Azure.Monitor" -Type "AzureMonitorWindowsAgent" -TypeHandlerVersion "1.0" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              Set-AzVMExtension -ResourceGroupName $ResourceGroup -Location $Location -VMName $VM -Name "DependencyAgentWindows" -Publisher "Microsoft.Azure.Monitoring.DependencyAgent" -Type "DependencyAgentWindows" -TypeHandlerVersion "9.10" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              Set-AzVMExtension -ResourceGroupName $ResourceGroup -Location $Location -VMName $VM -Name "GuestHealthWindowsAgent" -Publisher "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth" -Type "GuestHealthWindowsAgent" -TypeHandlerVersion "1.0" -Settings $PublicSettings -ProtectedSettings $ProtectedSettings
              Set-AzVMExtension -ResourceGroupName $ResourceGroup -Location $Location -VMName $VM -Name  "OptimalizationPack" -Publisher "Microsoft.Compute" -Type "CustomScriptExtension" -TypeHandlerVersion "1.10" -Settings $Settings -ProtectedSettings $OptimalizationPack
              Restart-AzVM -ResourceGroupName $ResourceGroup -Name $VM
            }

        azPSVersion: 'latest'
