name: 1-Create-Storage-Account
on: workflow_dispatch

env:
  STORAGE_ACCOUNT: "ucorpwvdstorageprem"
  RESOURCE_GROUP: "ucorp-storage-rg"
  SECURITY_GROUP: "SG_WVD_Users"

jobs:
  build:
    name: 1-Create-Storage-Account
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          [string]$storageAccountName = [System.Environment]::GetEnvironmentVariable('STORAGE_ACCOUNT')
          [string]$ResourceGroup = [System.Environment]::GetEnvironmentVariable('RESOURCE_GROUP')
          [string]$SecurityGroup = [System.Environment]::GetEnvironmentVariable('SECURITY_GROUP')

          $Tags = @{"Environment"="WVD Production"}

          # Create the resource group if needed
          try {
              Get-AzResourceGroup -Name $ResourceGroup -ErrorAction Stop
              } catch {
              New-AzResourceGroup -Name $ResourceGroup -Location "westeurope" -Tag $Tags
              }

          ## Create a Template Parameter Object (hashtable)
          $objTemplateParameter = @{
          "storageAccountName" = "$storageAccountName";
          "location" = "westeurope";
          "accessTier" = "Hot";
          "minimumTlsVersion" = "TLS1_2";
          "supportsHttpsTrafficOnly" = $true;
          "allowBlobPublicAccess" = $false;
          "allowSharedKeyAccess" = $true;
          "networkAclsBypass" = "AzureServices";
          "networkAclsDefaultAction" = "Allow";
          "accountType" = "Premium_LRS";
          "kind" = "FileStorage";
          "isShareSoftDeleteEnabled" = $true;
          "shareSoftDeleteRetentionDays" = 90;
          }

          # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
          $jsonARMTemplateFile = [string]($env:TEMP + "\1-ARM-Create-storage-Account.json")
              
          # storage location for custom ARM template
          $templateUrl="https://raw.githubusercontent.com/iuenk/WVD/main/ARMTemplates/1-ARM-Create-Storage-Account.json"

          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing

          # ARM Template file
          ## Add SessionHosts to existing WVD Hostpool, based on ARM Template
          New-AzResourceGroupDeployment -ResourceGroupName $ResourceGroup -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -Tag $Tags -Verbose

          # Create file shares fslogix and msixappattach
          # $storageKey = (Get-AzstorageAccountKey -ResourceGroupName $ResourceGroup -Name $storageAccountName).Value[0]
          #$ storageContext = New-AzstorageContext -storageAccountName $storageAccountName -storageAccountKey $storageKey

          $fslogixO365 = "fslogixO365"
          $fslogixProfiles = "fslogixProfiles"
          $msix = "msixappattach"
          # New-AzstorageShare -Name $fslogix -Context $storageContext
          # New-AzstorageShare -Name $msix -Context $storageContext

          New-AzRmStorageShare -ResourceGroupName $ResourceGroupName -StorageAccountName $storageAccountName -Name $fslogixO365 -AccessTier Premium -QuotaGiB 5
          New-AzRmStorageShare -ResourceGroupName $ResourceGroupName -StorageAccountName $storageAccountName -Name $fslogixProfiles -AccessTier Premium -QuotaGiB 10
          New-AzRmStorageShare -ResourceGroupName $ResourceGroupName -StorageAccountName $storageAccountName -Name $msix -AccessTier TransactionOptimized -QuotaGiB 10

          # rechten nog zetten op de shares
          #$SecurityGroupID = (Get-AzADGroup -DisplayName $SecurityGroup).id
          # $FslogixID = "/subscriptions/${{secrets.AZURE_SUBSCRIPTIONID}}/resourceGroups/$ResourceGroup/providers/Microsoft.storage/storageAccounts/$storageAccountName/fileServices/default/fileshares/$fslogix"
          # $MsixID = "/subscriptions/${{secrets.AZURE_SUBSCRIPTIONID}}/resourceGroups/$ResourceGroup/providers/Microsoft.storage/storageAccounts/$storageAccountName/fileServices/default/fileshares/$msix"

          # To give individual accounts access to the file share (Kerberos), enable identity-based authentication for the storage account
          # New-AzRoleAssignment -ObjectID $SecurityGroupID -RoleDefinitionName "storage File Data SMB Share Contributor" -Scope $FslogixID
          # New-AzRoleAssignment -ObjectID $SecurityGroupID -RoleDefinitionName "storage File Data SMB Share Contributor" -Scope $MsixID

        azPSVersion: 'latest'

