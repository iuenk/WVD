name: 3-Create-WVD-Host-Pool
on: workflow_dispatch

env:
  AZURE_HOSTPOOL_NAME: "Ucorp-WVD-Pool"     # WVD Hostpool name
  AZURE_NUMBER_OF_INSTANCES: 1              # Number of instances to add to the WVD Hostpool
  SIG: "ucorpwvdsig"                        # SIG Name
  SIG_IMAGE_DEF_NAME: "Ucorp-WVD-Image"     # Managed image from SIG
  RESOURCE_GROUP: "ucorp-wvd1-rg"
  VAULT_NAME: "ucorp-wvd-kv"
  SECURITY_GROUP: "SG_WVD_Users"
  VMSIZE: "Standard_D4s_v3"                 # Standard_D8s_v3
  VMDISKTYPE: "Standard_LRS"                # Premium_LRS
  CUSTOMER_PREFIX: "Ucorp"
  
jobs:
  build:
    name: 3-Create-WVD-Host-Pool
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          [string]$HostPoolName = [System.Environment]::GetEnvironmentVariable('AZURE_HOSTPOOL_NAME')
          [string]$Sig = [System.Environment]::GetEnvironmentVariable('SIG')
          [string]$SigImageDefName = [System.Environment]::GetEnvironmentVariable('SIG_IMAGE_DEF_NAME')
          [string]$SecurityGroup = [System.Environment]::GetEnvironmentVariable('SECURITY_GROUP')
          [string]$CustomerPrefix = [System.Environment]::GetEnvironmentVariable('CUSTOMER_PREFIX')
          [string]$ResourceGroup = [System.Environment]::GetEnvironmentVariable('RESOURCE_GROUP')
          [string]$VMSize = [System.Environment]::GetEnvironmentVariable('VMSIZE')
          [string]$VMDiskType = [System.Environment]::GetEnvironmentVariable('VMDISKTYPE')
          [string]$VaultName = [System.Environment]::GetEnvironmentVariable('VAULT_NAME')
          [int]$NumberOfInstances = [System.Environment]::GetEnvironmentVariable('AZURE_NUMBER_OF_INSTANCES')

          $Tags = @{"Environment"="WVD Production"}
          $Cores = "4"
          $Ram = "16"
          $VNetName = "Ucorp-vNet"
          $SubnetName = "ucorp-wvd-subnet"
          $VNetResourceGroup = "ucorp-network-rg"

          # Retrieve sensitive information from KeyVault
          $secureAdminPassword = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainadminpassword).SecretValue
          $secureDomainAdminUser = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainadminuser).SecretValue
          $secureDomainName = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainname).SecretValue
          $secureOuPath = (Get-AzKeyVaultSecret -VaultName $VaultName -Name domainoupath).SecretValue

          # Convert KeyVault SecureString to Plaintext
          $domainAdminUser = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainAdminUser)))
          $domainName = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainName)))
          $ouPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureOuPath)))

          # Create the resource group if needed
          try {
              Get-AzResourceGroup -Name $ResourceGroup -ErrorAction Stop
          } catch {
              New-AzResourceGroup -Name $ResourceGroup -Location "westeurope" -Tag $Tags
          }

          ## Create a Template Parameter Object (hashtable)
          $objTemplateParameter = @{
            "hostpoolName" = $HostPoolName;
            "hostpoolDescription" = "Created by GitHub Actions, PowerShell and ARM Template";
            "location" = "westeurope";
            "validationEnvironment" = $false;
            "addToWorkspace" = $true;
            "workSpaceName" = "$($CustomerPrefix)-wvd-Workspace";
            "workspaceLocation" = "westeurope";
            "workspaceResourceGroup" = $ResourceGroup;
            "allApplicationGroupReferences" = "";
            "createAvailabilitySet" = $true;
            "customRdpProperty" = "audiocapturemode:i:1;camerastoredirect:s:*;"
            "vmResourceGroup" = $ResourceGroup;
            "vmLocation" = "westeurope";
            "vmSize" = $VMSize;
            "vmNumberOfInstances" = $NumberOfInstances;
            "vmNamePrefix" = "$($CustomerPrefix)-WVD";
            "vmImageType" = "CustomImage";
            "vmCustomImageSourceId" = "/subscriptions/${{secrets.AZURE_SUBSCRIPTIONID}}/resourceGroups/Ucorp-wvd-rg/providers/Microsoft.Compute/galleries/${{env.SIG}}/images/${{env.SIG_IMAGE_DEF_NAME}}";
            "vmDiskType" = $VMDiskType;
            "vmUseManagedDisks" = $true;
            "existingVnetName" = $VNetName;
            "existingSubnetName" = $SubnetName;
            "virtualNetworkResourceGroupName" = $VNetResourceGroup;
            "usePublicIP" = $false;
            "createNetworkSecurityGroup" = $false;
            "virtualMachineTags" = $Tags;
            "hostpoolType" = "Pooled";
            "maxSessionLimit" = 8;
            "loadBalancerType" = "DepthFirst";
            "vmTemplate" = "{`"domain`"`:`"$($domainName)`",`"galleryImageOffer`"`:null,`"galleryImagePublisher`"`:null,`"galleryImageSKU`"`:null,`"imageType`"`:`"CustomImage`",`"imageUri`"`:null,`"customImageId`"`:`"/subscriptions/${{secrets.AZURE_SUBSCRIPTIONID}}/resourceGroups/Ucorp-wvd-rg/providers/Microsoft.Compute/galleries/${{env.SIG}}/images/${{env.SIG_IMAGE_DEF_NAME}}`",`"namePrefix`":`"$($CustomerPrefix)-wvd`",`"osDiskType`"`:`"$VMDiskType`",`"useManagedDisks`"`:true,`"vmSize`"`:{`"id`"`:`"$VMDiskType`",`"cores`"`:$Cores,`"ram`"`:$Ram},`"galleryItemId`"`:null}";
            "tokenExpirationTime" = $(Get-Date ((Get-Date).AddDays(25)) -Format "yyyy-MM-ddTHH:mm:ss.fffZ");
            "apiVersion" = "2019-12-10-preview";
            "administratorAccountUsername" = "$($domainAdminUser)";
            "domain"="$($domainName)";
            "ouPath"="$($ouPath)";
          }

          # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
          $jsonARMTemplateFile = [string]($env:TEMP + "\3-ARM-Create-WVD-Hostpool.json")

          # Storage location for custom ARM template
          $templateUrl="https://raw.githubusercontent.com/iuenk/WVD/main/ARMTemplates/3-ARM-Create-WVD-Hostpool.json"

          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing

          # ARM Template file
          ## Add SessionHosts to existing WVD Hostpool, based on ARM Template
          New-AzResourceGroupDeployment -ResourceGroupName $ResourceGroup -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -administratorAccountPassword $secureAdminPassword -Tag $Tags -Verbose
          
          # Configuring WVD Application groups
          Update-AzWvdDesktop -ResourceGroupName $ResourceGroup -ApplicationGroupName "$HostPoolName-DAG" -Name SessionDesktop -FriendlyName "$CustomerPrefix Workspace"
          $ResourceIDHostPool = Get-AzResource -ResourceGroupName $ResourceGroup | Where-Object {$_.Name -like $HostPoolName} | Select-Object -ExpandProperty ResourceID
          New-AzWvdApplicationGroup -ResourceGroupName $ResourceGroup -Location "westeurope" -Name "$HostPoolName-RAG" -HostPoolArmPath $ResourceIDHostPool -ApplicationGroupType RemoteApp

          $ResourceIDDesktopGroup = Get-AzResource -ResourceGroupName $ResourceGroup | Where-Object {$_.Name -eq "$HostPoolName-DAG"} | Select-Object -ExpandProperty ResourceID
          $ResourceIDRemoteAppGroup = Get-AzResource -ResourceGroupName $ResourceGroup | Where-Object {$_.Name -eq "$HostPoolName-RAG"} | Select-Object -ExpandProperty ResourceID

          $ApplicationGroupReference = "$ResourceIDDesktopGroup","$ResourceIDRemoteAppGroup"
          Update-AzWvdWorkspace -ResourceGroupName $ResourceGroup -Name "$CustomerPrefix-wvd-Workspace" -ApplicationGroupReference $ApplicationGroupReference

          #Add AD group to new created Groups
          $SecurityGroupId = Get-AZADGroup | Where-Object {$_.MailNickname -eq $SecurityGroup} | Select-Object -ExpandProperty Id
          New-AzRoleAssignment -ObjectId $SecurityGroupId -RoleDefinitionName "Desktop Virtualization User" -ResourceName "$HostPoolName-DAG" -ResourceGroupName $ResourceGroup -ResourceType 'Microsoft.DesktopVirtualization/applicationGroups'
          New-AzRoleAssignment -ObjectId $SecurityGroupId -RoleDefinitionName "Desktop Virtualization User" -ResourceName "$HostPoolName-RAG" -ResourceGroupName $ResourceGroup -ResourceType 'Microsoft.DesktopVirtualization/applicationGroups'

        azPSVersion: 'latest'
